#!/bin/sh

IFS=$'\n'
RANDOM_GEN="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 8)"
TIMESTAMP=$(date +"%Y%m%d%H%M%S")
ARGS=`getopt -o rsRShv --long record-system,restore-system,record-home,restore-home,help,version \
             -n 'canonical-ownership' -- "$@"`

eval set -- "$ARGS"

printinfo(){ 
    echo -e "[\e[96mINFO\e[0m]: \e[1m$*\e[0m" >&2; 
}
printwarn(){ 
    echo -e "[\e[33mWARN\e[0m]: \e[1m$*\e[0m" >&2; 
}
printerr(){ 
    echo -e "[\e[31mERROR\e[0m]: \e[1m$*\e[0m" >&2; 
}

usage(){
    printf \
"Canonical Ownership:	Return the files to whom it belong to. 
			Fixes system file ownership and modes.

	-r, --record-system		Record current state of ALL system files.
					(WARNING: may take more than 20 minutes)
	-s, --restore-system		Restore system to latest correct state (assumed).
        -R, --record-home		Similar to '--record-system' but for recordings 
					current $HOME for user running this script only.
	-S, --restore-home		Similar to '--record-system' but for restoring
					current $HOME for user running this script only.
	-h, --help			Print this help message.
	-v, --version			Version of Canonical Ownership.

"
}

cowner_version(){
    echo "Canonical Version VERSION (a little joke from Microsoft)."
}

count_file(){
    res=$(find / | wc -l)
    printinfo "Found $res files in current filesystem."
}

count_file_home(){
    res=$(find $HOME/ | wc -l)
    printinfo "Found $res files in current filesystem."
}

cowner_record_full_system(){
    mkdir -p /tmp/$RANDOM_GEN/ /var/lib/canonical-ownership/full-system/
    find / -not -path /proc -not -path /dev -not -path /sys \
        > /tmp/$RANDOM_GEN/enlist-$TIMESTAMP 
    for preproc in `cat /tmp/$RANDOM_GEN/enlist-$TIMESTAMP`; do
        stat -c "%a	%u	%g	%n" $preproc ; done \
        > /var/lib/canonical-ownership/full-system/saved-list-$TIMESTAMP 
}

cowner_find_newest_system_list(){
    if [ -f /var/lib/canonical-ownership/full-system/saved-list-* ]; then
        NEWEST_LIST=$(ls -t /var/lib/canonical-ownership/full-system/saved-list-* | head -1)
        RECORD_FOUND=1
    else
        printerr "No former record found!"
        RECORD_FOUND=0
    fi
}

cowner_restore_full_system(){
    while read line; do
        MODE=$(echo $line | cut -f1 -d$'\t')
        OWNER=$(echo $line | cut -f2 -d$'\t')
        GROUP=$(echo $line | cut -f3 -d$'\t')
        FILE=$(echo $line | cut -f4 -d$'\t')
        chown -v $OWNER:$GROUP $FILE
        chmod -v $MODE $FILE
    done < $NEWEST_LIST > $(echo $NEWEST_LIST | cut -f6 -d'/')-restore-log
}

cowner_record_home(){
    mkdir -p $HOME/.canonical-ownership/{tmp/$RANDOM_GEN,records,logs}
    for i in `find $HOME/`; do
        echo $i
        done > $HOME/.canonical-ownership/tmp/$RANDOM_GEN/enlist-$TIMESTAMP
    for preproc in `cat $HOME/.canonical-ownership/tmp/$RANDOM_GEN/enlist-$TIMESTAMP`; do
        stat -c "%a	%u	%g	%n" $preproc ; done \
        > $HOME/.canonical-ownership/records/saved-list-$TIMESTAMP
}

cowner_find_newest_home_list(){
    if [ "$(ls -A $HOME/.canonical-ownership/records/saved-list-*)" ]; then
        NEWEST_LIST_HOME=$(ls -t $HOME/.canonical-ownership/records/saved-list-* | head -1)
        RECORD_FOUND_HOME=1
    else
        printerr "No former record found!"
        RECORD_FOUND_HOME=0
    fi
}

cowner_restore_home(){
    while read line; do
        MODE=$(echo $line | cut -f1 -d$'\t')
        OWNER=$(echo $line | cut -f2 -d$'\t')
        GROUP=$(echo $line | cut -f3 -d$'\t')
        FILE=$(echo $line | cut -f4 -d$'\t')
        chown -v $OWNER:$GROUP $FILE
    chmod -v $MODE $FILE
done < $NEWEST_LIST_HOME > $HOME/.canonical-ownership/logs/$(echo $NEWEST_LIST_HOME | cut -f6 -d'/')-restore-log 
}

while true; do
  case "$1" in
    -r | --record-system ) 
        if [ "$(id -u)" != "0" ]; then
            printerr "You cannot record system file state unless you are root."
            exit 1
        else
            count_file;
            printinfo "Recording system file state, a cup of tea advised."
            cowner_record_full_system;
        fi
        shift ;;
    -s | --restore-system ) 
        if [ "$(id -u)" != "0" ]; then
            printerr "You cannot restore system file state unless you are root."
            exit 1
        else
            if [ "xRECORD_FOUND" = "x1" ]; then
                cowner_find_newest_system_list;
                cowner_restore_full_system;
            else
                cowner_find_newest_system_list;
                exit
            fi
        fi
        shift ;;
    -R | --record-home )
        count_file_home;
        printinfo "Recording file state for $(whoami)'s home directory..."
        cowner_record_home;
        shift ;;
    -S | --restore-home )
        printinfo "Restoring file state for $(whoami)'s home directory..."
        cowner_find_newest_home_list;
        cowner_restore_home;
        shift ;;
    -h | --help )
        usage;
        shift ;;
    -v | --version )
        cowner_version;
        shift ;;
    -- ) break ;;
    * ) break ;;
  esac
done
